import { proxy } from "valtio";
import gameWsService from "../services/connect";
import { multiGameActions, multiGameState } from "./multi-game";
import type {
  MessageGameCreated,
  MessageGameJoined,
  MessagePlayerJoined,
  MessageGameStarted,
  MessageCardFlipped,
  MessageGameUpdated,
  MessageGameEnded,
  MessageError,
} from "../services/connect";

interface GamePlayer {
  id: number;
  isConnected: boolean;
}

interface GameState {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  isConnected: boolean;
  isConnecting: boolean;

  // –ò–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞
  roomId: string | null;
  playerId: number | null; // 1 –∏–ª–∏ 2
  players: GamePlayer[];
  playersCount: number;

  // –ò–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
  createGame: () => void;
  joinGame: (roomId: string) => void;
  startGame: () => void;
  flipCard: (cardIndex: number) => void;
  restartGame: () => void;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–æ–∫
  error: string | null;
  clearError: () => void;
}

export const gameProxy = proxy<GameState>({
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  isConnected: false,
  isConnecting: false,

  // –ò–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞
  roomId: null,
  playerId: null,
  players: [],
  playersCount: 0,

  // –ò–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
  createGame() {
    gameProxy.error = null;
    
    gameWsService.createGame();
  },

  joinGame(roomId: string) {
    gameProxy.error = null;
    gameWsService.joinGame(roomId);
  },

  startGame() {
    if (gameProxy.playerId !== 1) {
      gameProxy.error = "–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É";
      return;
    }
    if (gameProxy.playersCount < 2) {
      gameProxy.error = "–û–∂–∏–¥–∞–µ—Ç—Å—è –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫";
      return;
    }
    gameWsService.startGame();
  },

  flipCard(cardIndex: number) {
    gameWsService.flipCard(cardIndex);
  },

  restartGame() {
    if (gameProxy.playerId !== 1) {
      gameProxy.error = "–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É";
      return;
    }
    gameWsService.restartGame();
  },

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–æ–∫
  error: null,
  clearError() {
    gameProxy.error = null;
  },
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
export const initGameStore = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const handleOpen = () => {
    gameProxy.isConnected = true;
    gameProxy.isConnecting = false;
    console.log("üéÆ Game WebSocket connected");
  };

  const handleClose = () => {
    gameProxy.isConnected = false;
    gameProxy.isConnecting = false;
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
    gameProxy.roomId = null;
    gameProxy.playerId = null;
    gameProxy.players = [];
    gameProxy.playersCount = 0;
    console.log("üéÆ Game WebSocket disconnected");
  };

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const connectionInterval = setInterval(() => {
    const isConn = gameWsService.isConnected();
    const isConnOrConnecting = gameWsService.isConnectingOrConnected();

    if (!isConn && isConnOrConnecting && !gameProxy.isConnecting) {
      gameProxy.isConnecting = true;
    } else if (isConn && gameProxy.isConnecting) {
      gameProxy.isConnecting = false;
      gameProxy.isConnected = true;
    }
  }, 500);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const handleGameCreated = (data: MessageGameCreated) => {
    console.log("üéÆ Game created:", data);
    
    multiGameState.roomId = data.room_id;
    gameProxy.playerId = data.playerId;
    gameProxy.players = [{ id: 1, isConnected: true }];
    gameProxy.playersCount = 1;
    
    gameWsService.setCurrentRoomId(data.room_id);
    gameWsService.setCurrentPlayerId(data.playerId);
  };

  const handleGameJoined = (data: MessageGameJoined) => {
    console.log("üéÆ Game joined:", data);
    gameProxy.roomId = data.roomId;
    gameProxy.playerId = data.playerId;
    gameProxy.playersCount = data.players;
    gameWsService.setCurrentPlayerId(data.playerId);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    gameProxy.players = [];
    for (let i = 1; i <= data.players; i++) {
      gameProxy.players.push({ id: i, isConnected: true });
    }
  };

  const handlePlayerJoined = (data: MessagePlayerJoined) => {
    console.log("üéÆ Player joined:", data);
    gameProxy.playersCount = data.players;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    gameProxy.players = [];
    for (let i = 1; i <= data.players; i++) {
      gameProxy.players.push({ id: i, isConnected: true });
    }
  };

  const handleGameStarted = (data: MessageGameStarted) => {
    console.log("üéÆ Game started:", data);
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    multiGameActions.startGame();
  };

  const handleCardFlipped = (data: MessageCardFlipped) => {
    console.log("üéÆ Card flipped:", data);
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞
    multiGameActions.updateCardFromServer(
      data.cardIndex,
      data.playerId,
      data.currentPlayer,
    );
  };

  const handleGameUpdated = (data: MessageGameUpdated) => {
    console.log("üéÆ Game updated:", data);
    // –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    multiGameActions.updateGameFromServer({
      cards: data.cards,
      playerScores: data.playerScores,
      currentPlayer: data.currentPlayer,
      gameOver: data.gameOver,
      winner: data.winner,
    });
  };

  const handleGameEnded = (data: MessageGameEnded) => {
    console.log("üéÆ Game ended:", data);
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    multiGameActions.updateGameFromServer({
      cards: [],
      playerScores: data.playerScores,
      currentPlayer: 1,
      gameOver: true,
      winner: data.winner,
    });
  };

  const handleError = (data: MessageError) => {
    console.error("üéÆ Game error:", data);
    gameProxy.error = data.message;
  };

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  gameWsService.on("open", handleOpen);
  gameWsService.on("close", handleClose);
  gameWsService.on("GameCreated", handleGameCreated);
  gameWsService.on("GameJoined", handleGameJoined);
  gameWsService.on("PlayerJoined", handlePlayerJoined);
  gameWsService.on("GameStarted", handleGameStarted);
  gameWsService.on("CardFlipped", handleCardFlipped);
  gameWsService.on("GameUpdated", handleGameUpdated);
  gameWsService.on("GameEnded", handleGameEnded);
  gameWsService.on("Error", handleError);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏
  return () => {
    gameWsService.off("open", handleOpen);
    gameWsService.off("close", handleClose);
    gameWsService.off("GameCreated", handleGameCreated);
    gameWsService.off("GameJoined", handleGameJoined);
    gameWsService.off("PlayerJoined", handlePlayerJoined);
    gameWsService.off("GameStarted", handleGameStarted);
    gameWsService.off("CardFlipped", handleCardFlipped);
    gameWsService.off("GameUpdated", handleGameUpdated);
    gameWsService.off("GameEnded", handleGameEnded);
    gameWsService.off("Error", handleError);
    clearInterval(connectionInterval);
  };
};
